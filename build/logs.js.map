{"version":3,"sources":["../src/logs.js"],"names":["LOGFILE","LOGFILE2","rotateLogFile","logFile","Promise","r","j","getLogFile","logFlag","defaultValue","Error","getLogWriteStreams","logfile","logfile2","logFile2","p","map","file","fs","createWriteStream","all"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,UAAU,mBAAQ,YAAR,CAAhB;AACA,MAAMC,WAAW,mBAAQ,YAAR,CAAjB;;AAEA,MAAMC,gBAAgB,MAAOC,OAAP,IAAmB;AACvC,QAAM,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAC1B;AACA;AACA;AACA;AACD,GALK,CAAN;AAOD,CARD,C,CAUA;;;AACA,MAAMC,aAAa,CAACC,OAAD,EAAUC,YAAV,KAA2B;AAC5C,MAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,UAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,UAAQ,OAAOF,OAAf;AACA,SAAK,WAAL;AACE,aAAO,IAAP;;AACF,SAAK,SAAL;AACE,UAAIA,OAAJ,EAAa;AACX,eAAOC,YAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACH,SAAK,QAAL;AACE,aAAOF,OAAP;AAVF;AAYD,CAhBD,C,CAkBA;;;AACO,MAAMG,qBAAqB,OAAOC,OAAP,EAAgBC,QAAhB,KAA6B;AAC7D,QAAMV,UAAUI,WAAWK,OAAX,EAAoBZ,OAApB,CAAhB;AACA,QAAMc,WAAWP,WAAWM,QAAX,EAAqBZ,QAArB,CAAjB;AAEA,QAAMc,IAAI,CAACZ,OAAD,EAAUW,QAAV,EAAoBE,GAApB,CAAwB,MAAOC,IAAP,IAAgB;AAChD,QAAIA,IAAJ,EAAU;AACR,YAAMf,cAAce,IAAd,CAAN;AACA,aAAOC,YAAGC,iBAAH,CAAqBF,IAArB,CAAP;AACD;AACF,GALS,CAAV;AAMA,QAAMb,QAAQgB,GAAR,CAAYL,CAAZ,CAAN;AACD,CAXM","sourcesContent":["import fs from 'fs'\nimport { resolve } from 'path'\n\nconst LOGFILE = resolve('stdout.log')\nconst LOGFILE2 = resolve('stderr.log')\n\nconst rotateLogFile = async (logFile) => {\n  await new Promise((r, j) => {\n    // rotate(logFile, { compress: false }, (err) => {\n    //   if (err) return j(err)\n    //   return r(logFile)\n    // })\n  }\n  )\n}\n\n// make sure that the log flag is either string or null\nconst getLogFile = (logFlag, defaultValue) => {\n  if (typeof defaultValue !== 'string') {\n    throw new Error('Please specify default value as string')\n  }\n  switch (typeof logFlag) {\n  case 'undefined':\n    return null\n  case 'boolean':\n    if (logFlag) {\n      return defaultValue\n    } else {\n      throw new Error('Unexpected false value for a log flag')\n    }\n  case 'string':\n    return logFlag\n  }\n}\n\n// return either an array of write streams or undefined\nexport const getLogWriteStreams = async (logfile, logfile2) => {\n  const logFile = getLogFile(logfile, LOGFILE)\n  const logFile2 = getLogFile(logfile2, LOGFILE2)\n\n  const p = [logFile, logFile2].map(async (file) => {\n    if (file) {\n      await rotateLogFile(file)\n      return fs.createWriteStream(file)\n    }\n  })\n  await Promise.all(p)\n}\n"],"file":"logs.js"}