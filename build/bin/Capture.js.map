{"version":3,"sources":["../../src/bin/Capture.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","timeout","w","Promise","r","console","log","setTimeout","Capture","wait","file","_file","app","title","delay","resize","colors","dir","gifsicle","max","on","files","ls","ListStream","wis","WinIdStream","cs","CaptureStream","noShadow","filetype","ts","Transform","transform","path","enc","next","p","push","length","destroy","error","stack","message","size","getSize","all","map","err","info"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { lstatSync } from 'fs'\nimport { Transform } from 'stream'\nimport { debuglog } from 'util'\nimport { erase } from 'wrote'\nimport pump from 'pump'\nimport { WinIdStream, getFile } from '../lib'\nimport gif from '../lib/gifsicle'\nimport convert from '../lib/convert'\nimport ListStream from '../lib/ListStream'\nimport CaptureStream from '../lib/CaptureStream'\nimport { resolve } from 'path'\n\nconst LOG = debuglog('appshot')\nconst DEBUG = /appshot/.test(process.env.NODE_DEBUG)\n\nconst timeout = async (w) => {\n  while (w > 0) {\n    await new Promise((r) => {\n      console.log('...%s', w)\n      setTimeout(r, 1000)\n      w--\n    })\n  }\n}\n\nexport default async function Capture({\n  wait,\n  file: _file,\n  app,\n  title,\n  delay,\n  resize,\n  colors = 256,\n  dir = '',\n  gifsicle,\n  max,\n}) {\n  let file = _file\n  if (!file) {\n    file = await getFile({ app, title })\n  }\n  file = resolve(dir, file)\n\n  await timeout(wait)\n\n  process.on('SIGINT', async () => {\n    DEBUG ? LOG('\\nSIGING\\n') : console.log('\\nStopping recording')\n  })\n\n  console.log('Starting recording (ctrl-c to stop)')\n  const files = []\n\n  const ls = new ListStream({ app, title, delay })\n  const wis = new WinIdStream\n  const cs = new CaptureStream({\n    file,\n    noShadow: true,\n    filetype: gifsicle ? 'gif' : 'png',\n  })\n  const ts = new Transform({\n    async transform(path, enc, next) {\n      const p = `${path}`\n      files.push(p)\n      console.log(files.length)\n      if (max && files.length >= max) {\n        ls.destroy()\n      }\n      next()\n    },\n  })\n\n  pump(\n    ls,\n    wis,\n    cs,\n    ts,\n    async (error) => {\n      if (error) {\n        DEBUG ? LOG(error.stack) : console.log(error.message)\n      }\n      LOG('END')\n      if (!files.length) return\n\n      let size\n      if (gifsicle) {\n        await gif({ resize, file, files, delay, colors })\n        size = getSize(file)\n      } else {\n        // image magic\n        await convert({ resize, file, files })\n        getSize(file)\n        await gif({ file, files: [file], delay })\n        size = getSize(file)\n      }\n      console.log('saved %s (%s bytes)', file, size)\n      await Promise.all(files.map(async path => {\n        try {\n          await erase({ path })\n          LOG('erased %s', path)\n        } catch (err) {\n          LOG(err)\n        }\n      }))\n    }\n  )\n}\n\nconst getSize = (file) => {\n  try {\n    const info = lstatSync(file)\n    LOG('%s: %s bytes', file, info.size)\n    return info.size\n    // ; (DEBUG ? LOG : console.log)('saved %s (%s bytes)', file, info.size)\n  } catch (err) {\n    // LOG(err.message)\n  }\n}\n"],"file":"Capture.js"}