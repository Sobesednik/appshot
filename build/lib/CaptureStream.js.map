{"version":3,"sources":["../../src/lib/CaptureStream.js"],"names":["LOG","CaptureStream","Transform","constructor","cursor","noShadow","file","objectMode","filetype","i","name","_transform","winid","encoding","next","d","Date","getMinutes","getSeconds","getMilliseconds","path","capture","getFilename","push","err","randomFilename","rnd","Math","ceil","random","getTempFile","filename","tempFile","p","allArgs","join","promise","stderr","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,SAAT,CAAZ;AAEA;;;;AAGe,MAAMC,aAAN,SAA4BC,iBAA5B,CAAsC;AACnDC,cAAY;AAAEC,UAAF;AAAUC,YAAV;AAAoBC,WAAO;AAA3B,GAAZ,EAAwD;AACtD,UAAM;AACJC,kBAAY;AADR,KAAN;AAGA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKG,QAAL,GAAgB,KAAhB;AACA,SAAKC,CAAL,GAAS,CAAT;AAEA,UAAM;AAAEC;AAAF,QAAW,iBAAMJ,IAAN,CAAjB;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACD;AACD;;;;;;;AAKA,QAAMC,UAAN,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;AACtC,UAAMC,IAAI,IAAIC,IAAJ,EAAV;AACAhB,QAAI,iCAAJ,EAAuCe,EAAEE,UAAF,EAAvC,EAAuDF,EAAEG,UAAF,EAAvD,EAAuEH,EAAEI,eAAF,EAAvE;;AAEA,QAAI;AACF,YAAMC,OAAO,MAAMC,QAAQ;AACzBT,aADyB;AAEzBJ,kBAAU,KAAKA,QAFU;AAGzBJ,gBAAQ,KAAKA,MAHY;AAIzBC,kBAAU,KAAKA,QAJU;AAKzBiB,qBAAa,MAAM;AACjB,iBAAQ,GAAE,KAAKZ,IAAK,IAAG,KAAKD,CAAE,EAA9B;AACD;AAPwB,OAAR,CAAnB;AASA,WAAKc,IAAL,CAAUH,IAAV;AACA,WAAKX,CAAL;AACAK;AACD,KAbD,CAaE,OAAOU,GAAP,EAAY;AACZV,WAAKU,GAAL;AACD;AACF;;AAtCkD;;;;AAyCrD,MAAMC,iBAAiB,MAAM;AAC3B,QAAMC,MAAMC,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgB,MAA1B,CAAZ;AACA,SAAQ,WAAUH,GAAI,EAAtB;AACD,CAHD;;AAKA,SAASI,WAAT,CAAqBR,cAAcG,cAAnC,EAAmD;AACjD,QAAMM,WAAWT,aAAjB;AACA,QAAMU,WAAW,mBAAQ,iBAAR,EAAkBD,QAAlB,CAAjB;AACA,SAAOC,QAAP;AACD;AAED;;;;;AAGA,MAAMX,UAAU,OAAO;AACrBT,OADqB;AACdR,QADc;AACNC,UADM;AACIG,aAAW,KADf;AACsBc;AADtB,CAAP,KAEV;AACJ,QAAMW,IAAIH,YAAYR,WAAZ,CAAV;AACA,QAAMF,OAAQ,GAAEa,CAAE,IAAGzB,QAAS,EAA9B;AAEA,QAAM0B,UAAU,CACd,IAAI9B,SAAS,CAAC,IAAD,CAAT,GAAkB,EAAtB,CADc,EAEd,IAAIC,WAAW,CAAC,IAAD,CAAX,GAAoB,EAAxB,CAFc,EAGb,KAAIG,QAAS,EAHA,EAIb,KAAII,KAAM,EAJG,EAKdQ,IALc,CAAhB;AAOApB,MAAI,OAAJ,EAAa,eAAb,EAA8BkC,QAAQC,IAAR,CAAa,GAAb,CAA9B;AACA,QAAM;AAAEC;AAAF,MAAc,2BAAM,eAAN,EAAuBF,OAAvB,CAApB;AACA,QAAM;AAAEG;AAAF,MAAa,MAAMD,OAAzB;AACA,MAAIC,MAAJ,EAAY,MAAM,IAAIC,KAAJ,CAAUD,MAAV,CAAN;AACZ,SAAOjB,IAAP;AACD,CAlBD","sourcesContent":["import spawn from 'spawncommand'\nimport { Transform } from 'stream'\nimport { resolve, parse } from 'path'\nimport { tmpdir } from 'os'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('appshot')\n\n/**\n * This transform stream will take a screenshot of a read window id and push a decoded PNG image.\n */\nexport default class CaptureStream extends Transform {\n  constructor({ cursor, noShadow, file = 'appshot.gif' }) {\n    super({\n      objectMode: true,\n    })\n    this.cursor = cursor\n    this.noShadow = noShadow\n    this.filetype = 'gif'\n    this.i = 0\n\n    const { name } = parse(file)\n    this.name = name\n  }\n  /**\n   * @param {number} winid\n   * @param {*} encoding\n   * @param {*} next\n   */\n  async _transform(winid, encoding, next) {\n    const d = new Date()\n    LOG('<CAPTURE transform at %s:%s.%s>', d.getMinutes(), d.getSeconds(), d.getMilliseconds())\n\n    try {\n      const path = await capture({\n        winid,\n        filetype: this.filetype,\n        cursor: this.cursor,\n        noShadow: this.noShadow,\n        getFilename: () => {\n          return `${this.name}-${this.i}`\n        },\n      })\n      this.push(path)\n      this.i++\n      next()\n    } catch (err) {\n      next(err)\n    }\n  }\n}\n\nconst randomFilename = () => {\n  const rnd = Math.ceil(Math.random() * 100000)\n  return `appshot-${rnd}`\n}\n\nfunction getTempFile(getFilename = randomFilename) {\n  const filename = getFilename()\n  const tempFile = resolve(tmpdir(), filename)\n  return tempFile\n}\n\n/**\n * Create a screenshot into a temp directory.\n */\nconst capture = async ({\n  winid, cursor, noShadow, filetype = 'png', getFilename,\n}) => {\n  const p = getTempFile(getFilename)\n  const path = `${p}.${filetype}`\n\n  const allArgs = [\n    ...(cursor ? ['-C'] : []),\n    ...(noShadow ? ['-o'] : []),\n    `-t${filetype}`,\n    `-l${winid}`,\n    path,\n  ]\n  LOG('%s %s', 'screencapture', allArgs.join(' '))\n  const { promise } = spawn('screencapture', allArgs)\n  const { stderr } = await promise\n  if (stderr) throw new Error(stderr)\n  return path\n}\n"],"file":"CaptureStream.js"}