{"version":3,"sources":["../../src/lib/index.js"],"names":["LOG","WinIdStream","Transform","constructor","objectMode","highWaterMark","_transform","data","enc","next","length","msg","windows","map","a","t","s","join","err","Error","win","push","getFile","app","title","file","text","getDefault","parts"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,MAAM,oBAAS,SAAT,CAAZ;AAEA;;;;AAGO,MAAMC,WAAN,SAA0BC,iBAA1B,CAAoC;AACzCC,gBAAc;AACZ,UAAM;AACJC,kBAAY,IADR;AAEJC,qBAAe;AAFX,KAAN;AAID;;AACDC,aAAWC,IAAX,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1B,QAAIF,KAAKG,MAAL,GAAc,CAAlB,EAAqB;AACnB,YAAMC,MAAM,gFAAZ;AACA,YAAMC,UAAUL,KAAKM,GAAL,CAAS,CAAC,GAAGC,CAAH,EAAMC,CAAN,CAAD,KAAc;AACrC,cAAMC,IAAK,KAAIF,CAAE,OAAMC,CAAE,EAAzB;AACA,eAAOC,CAAP;AACD,OAHe,EAGbC,IAHa,CAGR,IAHQ,CAAhB;AAIA,YAAMC,MAAM,IAAIC,KAAJ,CAAW,GAAER,GAAI,KAAIC,OAAQ,EAA7B,CAAZ;AACAH,WAAKS,GAAL;AACD,KARD,MAQO,IAAI,CAACX,KAAKG,MAAV,EAAkB;AACvB,YAAMC,MAAM,sBAAZ;AACA,YAAMO,MAAM,IAAIC,KAAJ,CAAUR,GAAV,CAAZ;AACAF,WAAKS,GAAL;AACD,KAJM,MAIA;AACL,YAAM,CAAC,CAACE,GAAD,CAAD,IAAUb,IAAhB;AACA,WAAKc,IAAL,CAAUD,GAAV;AACAX;AACD;AACF;;AAzBwC;;;;AA4BpC,MAAMa,UAAU,OAAO;AAAEC,KAAF;AAAOC;AAAP,CAAP,KAA0B;AAC/C,QAAMC,OAAO,MAAM,6BAAa;AAC9BA,UAAM;AACJC,YAAM,UADF;;AAEJ,YAAMC,UAAN,GAAmB;AACjB,cAAMC,QAAQ,CAAC,SAAD,CAAd;AACA,YAAIL,GAAJ,EAASK,MAAMP,IAAN,CAAY,IAAGE,GAAI,EAAnB;AACT,YAAIC,KAAJ,EAAWI,MAAMP,IAAN,CAAY,IAAGG,KAAM,EAArB;AACX,eAAQ,GAAEI,MAAMX,IAAN,CAAW,EAAX,CAAe,MAAzB;AACD;;AAPG;AADwB,GAAb,EAUhB,IAVgB,EAUV,MAVU,CAAnB;AAWA,SAAOQ,IAAP;AACD,CAbM","sourcesContent":["import { Transform } from 'stream'\nimport { askQuestions } from 'reloquent'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('appshot')\n\n/**\n * Transform a list of ids into a single window id.\n */\nexport class WinIdStream extends Transform {\n  constructor() {\n    super({\n      objectMode: true,\n      highWaterMark: 0,\n    })\n  }\n  _transform(data, enc, next) {\n    if (data.length > 1) {\n      const msg = 'More than one window is found, please update the filter with -a and -t options'\n      const windows = data.map(([, a, t]) => {\n        const s = `  ${a} :: ${t}`\n        return s\n      }).join('\\n')\n      const err = new Error(`${msg}\\n${windows}`)\n      next(err)\n    } else if (!data.length) {\n      const msg = 'No windows are found'\n      const err = new Error(msg)\n      next(err)\n    } else {\n      const [[win]] = data\n      this.push(win)\n      next()\n    }\n  }\n}\n\nexport const getFile = async ({ app, title }) => {\n  const file = await askQuestions({\n    file: {\n      text: 'gif name',\n      async getDefault() {\n        const parts = ['appshot']\n        if (app) parts.push(`-${app}`)\n        if (title) parts.push(`-${title}`)\n        return `${parts.join('')}.gif`\n      },\n    },\n  }, null, 'file')\n  return file\n}\n"],"file":"index.js"}