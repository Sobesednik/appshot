{"version":3,"sources":["../../src/lib/convert.js"],"names":["LOG","getChopTop","chopTop","resize","file","files","delay","args","getConvertArgs","cp","allArgs","join","stderr","promise","on","data","colors","optimize","push"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA,MAAMA,MAAM,oBAAS,SAAT,CAAZ;;AAEA,MAAMC,aAAa,CAACC,UAAU,CAAX,KAAiB;AAClC,MAAIA,OAAJ,EAAa;AACX,WAAO,CAAC,UAAD,EAAa,OAAb,EAAsB,OAAtB,EAAgC,IAAGA,OAAQ,EAA3C,CAAP;AACD;;AACD,SAAO,EAAP;AACD,CALD;;eAOe,OAAO;AACpBC,QADoB;AACZC,MADY;AACNC,OADM;AACCC,OADD;AACQJ;AADR,CAAP,KAET;AACJ,QAAMK,OAAOC,eAAe;AAC1BL,UAD0B;AAE1BG;AAF0B,GAAf,CAAb;AAIA,QAAMG,KAAKR,WAAWC,OAAX,CAAX;AACA,QAAMQ,UAAU,CAAC,GAAGD,EAAJ,EAAQ,GAAGJ,KAAX,EAAkB,GAAGE,IAArB,EAA2BH,IAA3B,CAAhB;AACAJ,MAAI,OAAJ,EAAa,SAAb,EAAwBU,QAAQC,IAAR,CAAa,GAAb,CAAxB;AACA,QAAM;AAAEC,UAAF;AAAUC;AAAV,MAAsB,2BAAM,SAAN,EAAiBH,OAAjB,CAA5B;AACAE,SAAOE,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;AAC1Bf,QAAK,GAAEe,IAAK,EAAZ;AACD,GAFD;AAGA,QAAMF,OAAN;AACA,SAAOT,IAAP;AACD,C;;;;AAED,MAAMI,iBAAiB,CAAC;AACtBL,QADsB;AAEtBa,QAFsB;AAGtBC,aAAW,eAHW;AAItBX,OAJsB;AAKtBJ,SALsB,CAMtB;;AANsB,IAOpB,EAPmB,KAOZ;AACT,QAAMK,OAAO,EAAb;AACA,MAAIJ,MAAJ,EAAYI,KAAKW,IAAL,CAAU,SAAV,EAAqBf,MAArB;AACZ,MAAIa,MAAJ,EAAYT,KAAKW,IAAL,CAAU,SAAV,EAAqBF,MAArB;AACZ,MAAIC,QAAJ,EAAcV,KAAKW,IAAL,CAAU,SAAV,EAAqBD,QAArB;AACd,MAAIX,KAAJ,EAAWC,KAAKW,IAAL,CAAU,QAAV,EAAoBZ,QAAQ,EAA5B;AACX,SAAOC,IAAP;AACD,CAdD","sourcesContent":["import spawn from 'spawncommand'\nimport { debuglog } from 'util'\nconst LOG = debuglog('appshot')\n\nconst getChopTop = (chopTop = 0) => {\n  if (chopTop) {\n    return ['-gravity', 'North', '-chop', `x${chopTop}`]\n  }\n  return []\n}\n\nexport default async ({\n  resize, file, files, delay, chopTop,\n}) => {\n  const args = getConvertArgs({\n    resize,\n    delay,\n  })\n  const cp = getChopTop(chopTop)\n  const allArgs = [...cp, ...files, ...args, file]\n  LOG('%s %s', 'convert', allArgs.join(' '))\n  const { stderr, promise } = spawn('convert', allArgs)\n  stderr.on('data', (data) => {\n    LOG(`${data}`)\n  })\n  await promise\n  return file\n}\n\nconst getConvertArgs = ({\n  resize,\n  colors,\n  optimize = 'OptimizeFrame',\n  delay,\n  chopTop,\n  // disposal,\n} = {}) => {\n  const args = []\n  if (resize) args.push('-resize', resize)\n  if (colors) args.push('-colors', colors)\n  if (optimize) args.push('-layers', optimize)\n  if (delay) args.push('-delay', delay / 10)\n  return args\n}\n"],"file":"convert.js"}